package ui;

import java.awt.Color;
import java.io.IOException;
import java.net.ConnectException;
import java.rmi.RemoteException;
import java.util.ArrayList;
import static java.util.Collections.list;
import java.util.HashSet;
import java.util.Iterator;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.table.DefaultTableModel;
import javax.xml.ws.WebServiceException;
import rmi.InviteLocal;
import sd.Client;
import sd.SD;
import webservices.Presences;

public class SendInvitesPanel extends javax.swing.JFrame {

    SD system;
    InviteLocal invite = new InviteLocal();

    public SendInvitesPanel(SD system) {
        this.system = system;
        initComponents();
        Client cl = system.lc.getClient();
        ArrayList<String> cursos = new ArrayList<>();
        if (getContactList(cl.getIp(), cl.getNome(), cl.getCurso(), cl.getEmail()) == null) {

            jLabel1.setForeground(Color.red);
            jLabel1.setText("Servidor de Presencas OFF LINE, por favor tente mais tarde!");
            jButton1.setEnabled(false);
        } else {
            List<webservices.Presences> presences = getContactList(cl.getIp(), cl.getNome(), cl.getCurso(), cl.getEmail());
            DefaultTableModel dtm = (DefaultTableModel) jTable1.getModel();
            dtm.setRowCount(presences.size());
            jTable1.setModel(dtm);

            for (int i = 0; i < presences.size(); i++) {

                String ip = presences.get(i).getIp();
                String nome = presences.get(i).getNome();
                String curso = presences.get(i).getCurso();
                cursos.add(curso);
                jTable1.setValueAt(ip, i, 0);
                jTable1.setValueAt(nome, i, 1);
                jTable1.setValueAt(curso, i, 2);
                cursos.add(curso);

            }

            cursos = new ArrayList<String>(new LinkedHashSet<String>(cursos));
            for (int i = 0; i < cursos.size(); i++) {
                if (i == 0) {
                    jComboBox1.addItem(null);

                }
                jComboBox1.addItem(cursos.get(i));
            }
        }

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jButton1 = new javax.swing.JButton();
        jComboBox1 = new javax.swing.JComboBox();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "IP", "Nome", "Curso", "Convidar"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Object.class, java.lang.Object.class, java.lang.Boolean.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(jTable1);

        jButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ui/images2/round_ok.png"))); // NOI18N
        jButton1.setText("Enviar");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jComboBox1.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jComboBox1ItemStateChanged(evt);
            }
        });
        jComboBox1.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jComboBox1FocusGained(evt);
            }
        });
        jComboBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 375, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(26, 26, 26)
                                .addComponent(jButton1))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap(23, Short.MAX_VALUE)
                        .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(198, 198, 198)
                        .addComponent(jButton1)
                        .addGap(9, 9, 9))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 275, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addComponent(jLabel1)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed

        this.system = system;
        Client cl = system.lc.getClient();
        for (int i = 0; i < jTable1.getRowCount(); i++) {
            if (jTable1.getModel().getValueAt(i, 3) != null) {
                if ((boolean) jTable1.getModel().getValueAt(i, 3) == true) {
                    System.out.println(jTable1.getModel().getValueAt(i, 0));
                    String ip = (String) jTable1.getModel().getValueAt(i, 0);
                    System.out.println(ip);
                    System.out.println(cl.getIp());
                    System.out.println(cl.getEmail());
                    System.out.println(cl.getCurso());
                    System.out.println(cl.getNome());
                    Boolean status = false;
                    try {
                        status = invite.sendInvite(ip, cl.getIp(), cl.getNome(), cl.getCurso(), cl.getEmail(), cl.getToken());
                        
                    } catch (RemoteException ex) {

                        Logger.getLogger(SendInvitesPanel.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    if(status==true){
                        dispose();
                    } else {
                                                jLabel1.setForeground(Color.red);
                        jLabel1.setText("Utilizador " + cl.getNome()+ " OFF Line");
                    }
                    
                }
            }
        }

    }//GEN-LAST:event_jButton1ActionPerformed

    private void jComboBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox1ActionPerformed
        if (jComboBox1.getSelectedItem() != null) {

            Client cl = system.lc.getClient();
            String curso2 = jComboBox1.getSelectedItem().toString();
            List<webservices.Presences> presences = getContactList(cl.getIp(), cl.getNome(), cl.getCurso(), cl.getEmail());

            ArrayList<webservices.Presences> select = new ArrayList<>();
            for (int i = 0; i < presences.size(); i++) {
                String curso = presences.get(i).getCurso();
                if (curso2.equals(curso)) {
                    select.add(presences.get(i));
                }
            }
            DefaultTableModel dtm = (DefaultTableModel) jTable1.getModel();
            dtm.setRowCount(select.size());
            jTable1.setModel(dtm);
            for (int i = 0; i < select.size(); i++) {

                String ip = select.get(i).getIp();
                String nome = select.get(i).getNome();
                String curso = select.get(i).getCurso();
                if (curso2.equals(curso)) {
                    jTable1.setValueAt(ip, i, 0);
                    jTable1.setValueAt(nome, i, 1);
                    jTable1.setValueAt(curso, i, 2);
                }

            }
        }
    }//GEN-LAST:event_jComboBox1ActionPerformed

    private void jComboBox1FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jComboBox1FocusGained

    }//GEN-LAST:event_jComboBox1FocusGained

    private void jComboBox1ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jComboBox1ItemStateChanged

    }//GEN-LAST:event_jComboBox1ItemStateChanged

    /**
     * @param args the command line arguments
     */

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JComboBox jComboBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    // End of variables declaration//GEN-END:variables

    private static java.util.List<webservices.Presences> getContactList(java.lang.String ip, java.lang.String nome, java.lang.String curso, java.lang.String email) throws WebServiceException {
        try {
            webservices.ContactManager_Service service = new webservices.ContactManager_Service();
            webservices.ContactManager port = service.getContactManagerPort();

            return port.getContactList(ip, nome, curso, email);
        } catch (WebServiceException e) {

        }
        return null;
    }
}
